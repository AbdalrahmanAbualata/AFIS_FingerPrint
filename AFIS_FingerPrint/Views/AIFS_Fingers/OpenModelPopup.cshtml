
@{
    ViewBag.Title = "OpenModelPopup";
    Layout = null;
}

<head>

    @*SDK INTGREATED BIO MATRIC*@

    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>IBSU Web Demonstration</title>
    <!-- Note: Demo requires bootstrap 3 -->
    <link href="~/wwwroot/css/font-awesome.min.css" rel="stylesheet" />
    <link href="~/wwwroot/css/bootstrap.min.css" rel="stylesheet" />
    <link href="~/wwwroot/css/site.css" rel="stylesheet" />
    <link href="~/wwwroot/css/templatemo-style.css" rel="stylesheet" />

    <script src="~/Content/axios.js"></script>
    <script src="~/Scripts/jquery-1.10.2.js"></script>
    <script src="~/Scripts/jquery-1.10.2.min.js"></script>
    <script src="~/Content/LZString.js"></script>


    2



</head>

<body>


    <div class="row">
        @*CODE TO SUPPORT THE IB DEMO APP*@
        <script src="http://localhost:5020/IBScanUltimate.min.js"></script>
        @*<script src="https://localhost:5021/IBScanUltimate.min.js"></script>*@
        <script type="text/javascript">

            var urlSaveFingerPrint = "@Url.Action("Save_Images_FingerPrint", "AIFS_Fingers")";
            var ApiSendFingerToSegmntation = "http://localhost:12300/api/AFISHome/FingerPrintSegemntation";
            var ApiSendFingerToSegmntationEndPoint2 = "http://localhost:12300/api/AFISHome/SigmentationThumbs";

            
            var SPLIT_TYPE_ID = window.location.href;
            var TypeId = SPLIT_TYPE_ID.split("=")[1];

            var PathSplitURL = localStorage.getItem("locationURL");
            console.log(PathSplitURL);
            var OldCASEID = PathSplitURL ? PathSplitURL.split('=')[1] : "";
            var CASEID = OldCASEID? OldCASEID.split("&")[0] :"0";
            var AGE = PathSplitURL ? PathSplitURL.split('=')[2] ? PathSplitURL.split('=')[2]:"0" : "";


            var demo = {
                connectedDeviceCount: 0,
                scannerDevice: undefined,
                beeperType: undefined,
                captureInProgress: false,
                captureInfo: new Object(),  // Actions during fingerprint scan
                deviceDesc: [],             // Array of device descriptions
                isBlank: false,
                clearPlatenWarning: false,
                scanDeviceWidth: undefined, scanDeviceHeight: undefined,
                viewWidth: 320,  // Physical size of HTML image view
                viewHeight: 300,
                previewWidth: 400,  // Image size as generated by SDK during preview - This will change with scanner type
                previewHeight: 375,
                okBeepSound: undefined,
                successBeepSound: undefined,
                deviceLocked: false
            }


            document.addEventListener('DOMContentLoaded', function (event) {
                InitPage();
            })

            function BeepOK() {

                if (demo.beeperType == IBSU_BeeperType.ENUM_IBSU_BEEPER_TYPE_NONE) {
                    if (typeof (demo.okBeepSound) !== 'undefined')
                        demo.okBeepSound.play();  // Via PC speaker
                } else {
                    SetBeeper(demo.scannerDevice, IBSU_BeepPattern.ENUM_IBSU_BEEP_PATTERN_GENERIC, 2/*Sol*/, 4/*300ms = 4*25ms*/, 0, 0);
                }

            }

            function BeepSuccess() {

                if (demo.beeperType == IBSU_BeeperType.ENUM_IBSU_BEEPER_TYPE_NONE) {
                    if (typeof (demo.successBeepSound) !== 'undefined')

                        demo.successBeepSound.play();  // Via PC speaker
                } else {
                    SetBeeper(demo.scannerDevice, IBSU_BeepPattern.ENUM_IBSU_BEEP_PATTERN_GENERIC, 2/*Sol*/, 4/*300ms = 4*25ms*/, 0, 0);
                    setTimeout(function () {
                        SetBeeper(demo.scannerDevice, IBSU_BeepPattern.ENUM_IBSU_BEEP_PATTERN_GENERIC, 2/*Sol*/, 4/*150ms = 4*25ms*/, 0, 0);
                    }, 150);
                }

            }

            function BeepFail() {
                if (demo.beeperType == IBSU_BeeperType.ENUM_IBSU_BEEPER_TYPE_NONE) {
                    BeepOK();  // Could create fail sound here.
                } else {
                    SetBeeper(demo.scannerDevice, IBSU_BeepPattern.ENUM_IBSU_BEEP_PATTERN_GENERIC, 2/*Sol*/, 12/*300ms = 12*25ms*/, 0, 0);
                    setTimeout(function () {
                        SetBeeper(demo.scannerDevice, IBSU_BeepPattern.ENUM_IBSU_BEEP_PATTERN_GENERIC, 2/*Sol*/, 6/*150ms = 6*25ms*/, 0, 0);
                    }, 150);
                    setTimeout(function () {
                        SetBeeper(demo.scannerDevice, IBSU_BeepPattern.ENUM_IBSU_BEEP_PATTERN_GENERIC, 2/*Sol*/, 6/*150ms = 6*25ms*/, 0, 0);
                    }, 300);

                    setTimeout(function () {
                        SetBeeper(demo.scannerDevice, IBSU_BeepPattern.ENUM_IBSU_BEEP_PATTERN_GENERIC, 2/*Sol*/, 6/*150ms = 6*25ms*/, 0, 0);
                    }, 450);

                }

            }

            function SetStatusMessage(strMessage) {
                document.getElementById("statusInfo").innerHTML = strMessage;
            }

            function SetStatusSpoofMessage(strMessage) {
                document.getElementById("statusSpoof").innerHTML = strMessage;
                document.getElementById("spanSpoofEnabled").innerHTML = strMessage;
            }

            function GetSDKVersion() {
                let funcName = 'IBSU.GetSDKVersion';
                IBSU.GetSDKVersion(function onSuccess(sdkVersionInfo) {

                    var message = "SDK Version " + sdkVersionInfo.Product +
                        ", DLL File version " + sdkVersionInfo.File +
                        ", Web SDK Version " + sdkVersionInfo.WebSDKVersion;
                    var message2 = " SDK Version " + sdkVersionInfo.Product +
                        "<br /> DLL File version " + sdkVersionInfo.File +
                        "<br /> Web SDK Version " + sdkVersionInfo.WebSDKVersion;

                    if (!sdkVersionInfo.File) {
                        alert('Unable to read IBScanUltimate SDK version.  Is the Base SDK installed?');
                    }
                    WriteFunctionResult(funcName, 0, message);

                    document.getElementById("dllVersion").innerHTML = message2;

                }, function onError(errorObj) {
                    SetStatusMessage("Unable to get SDK version: " + errorObj.message + '(' + errorObj.code + ')');
                    WriteFunctionResult(funcName, errorObj.code, errorObj.message);
                });

            }


            function GetDeviceCount() {
                let funcName = 'IBSU.GetDeviceCount';
                IBSU.GetDeviceCount(function onSuccess(nDevices) {
                    document.getElementById("deviceCountID").innerHTML = nDevices;
                    demo.connectedDeviceCount = nDevices;
                    ReloadDeviceList();

                }, function onError(errorObj) {
                    SetStatusMessage("Unable to get device count: " + errorObj.message + '(' + errorObj.code + ')');
                    WriteFunctionResult(funcName, errorObj.code, errorObj.message);
                });

            };


            function GetDeviceDescription(deviceIndex, callback) {
                IBSU.GetDeviceDescription(deviceIndex, function onSuccess(deviceDescription) {
                    callback(deviceIndex, deviceDescription);
                }, function onError(errorObj) {
                    SetStatusMessage("Unable to get device description: " + errorObj.message + '(' + errorObj.code + ')');
                    WriteFunctionResult("GetDeviceDescription", errorObj.code, errorObj.message);
                });

            }

            function QueryImageDimensions(onCompletionCallback) {

                GetProperty(demo.scannerDevice, IBSU_PropertyId.ENUM_IBSU_PROPERTY_IMAGE_WIDTH, true, function onComplete(success, strImageWidth) {
                    if (!success) return;
                    demo.scanDeviceWidth = Number(strImageWidth);

                    GetProperty(demo.scannerDevice, IBSU_PropertyId.ENUM_IBSU_PROPERTY_IMAGE_HEIGHT, true, function onComplete(success, strImageHeight) {
                        if (!success) return;
                        demo.scanDeviceHeight = Number(strImageHeight);

                        onCompletionCallback();
                    });
                });
            }

            //  ------------------------------------------------------ RT Logging --------------------------------
            var appendedText = "";
            function WriteFunctionResult(functionName, resultCode, additionalText) {

                var strFunctionResult = "-- " + functionName + " -- Return Value (" + resultCode + ")";
                if (document.getElementById("idAppendFunctionResult").checked) {
                    if (appendedText.length > 0) appendedText += "\n";
                    appendedText += strFunctionResult;
                } else {
                    appendedText = strFunctionResult;
                }
                var functionResultBox = document.getElementById("idFunctionResult");
                functionResultBox.innerHTML = appendedText;
                functionResultBox.scrollTop = functionResultBox.scrollHeight;
                document.getElementById("idAdditionalInformation").innerHTML = additionalText;
            }

            function between(x, min, max) {
                return x >= min && x <= max;
            }

            // -------------------------------------------------ENCRYPTION SUPPORT -------------------------------------
            //  -------  Process; Run GetProperty to get current value; if checkbox is checked, Set Property to enabled

            function funcSetEncrypt() {

                if (document.getElementById("cbEnableEncrypt").checked === true) {
                    GetProperty(demo.scannerDevice,
                        IBSU_PropertyId.ENUM_IBSU_PROPERTY_ENABLE_ENCRYPTION,
                        false,
                        function onComplete(success, strEnableEncrypt) {
                            if (!success) {
                                document.getElementById("spanEncryptEnabled").innerHTML =
                                    "is like " + success + "   " + strEnableEncrypt;
                                return;
                            }
                            if (strEnableEncrypt === 'FALSE') {
                                SetProperty(demo.scannerDevice,
                                    IBSU_PropertyId.ENUM_IBSU_PROPERTY_ENABLE_ENCRYPTION,
                                    'TRUE',
                                    function (bSuccess) {
                                        if (!bSuccess) return; // Error message already shown
                                    });
                                document.getElementById("spanEncryptEnabled").innerHTML = "Encryption Enabled";
                            }
                        });

                }
                if (document.getElementById("cbEnableEncrypt").checked === false) {
                    GetProperty(demo.scannerDevice,
                        IBSU_PropertyId.ENUM_IBSU_PROPERTY_ENABLE_ENCRYPTION,
                        false,
                        function onComplete(success, strEnableEncrypt) {
                            if (!success) return;
                            if (strEnableEncrypt === 'TRUE') {
                                SetProperty(demo.scannerDevice,
                                    IBSU_PropertyId.ENUM_IBSU_PROPERTY_ENABLE_ENCRYPTION,
                                    'FALSE',
                                    true,
                                    function (bSuccess) {
                                        if (!bSuccess) return; // Error message already shown
                                    });
                            }
                        });
                    document.getElementById("spanEncryptEnabled").innerHTML = "Encryption Disabled";
                }
            }

            // --------------------------------------------------------  SPOOFING -------------------------------------

            function funcGetSpoofSupport() {
                GetProperty(demo.scannerDevice, IBSU_PropertyId.ENUM_IBSU_PROPERTY_IS_SPOOF_SUPPORTED,
                    false,
                    function onComplete(success, strSpoofSupport) {

                        if (!success) return;
                        if (strSpoofSupport === 'TRUE') {
                            if (document.getElementById("cbEnableSpoof").checked === true) {
                                document.getElementById("cbEnableSpoof").enabled = true;
                                strSpoofStatus = "Spoof Supported";
                                SetStatusSpoofMessage(strSpoofStatus);
                            } else {
                                if (document.getElementById("cbEnableSpoof").checked === false) {
                                    document.getElementById("cbEnableSpoof").disabled = true;
                                    strSpoofStatus = "Spoof Supported but Disabled";
                                    SetStatusSpoofMessage(strSpoofStatus);
                                }
                            }
                        } else {
                            document.getElementById("cbEnableSpoof").checked = false;
                            document.getElementById("cbEnableSpoof").enabled = false;
                            strSpoofStatus = "Spoof Not Supported";
                            SetStatusSpoofMessage(strSpoofStatus);
                        }
                    });
            }

            function SetupSpoofing() {
                strSpoofStatus = "";
                if (document.getElementById("cbEnableSpoof").checked === true) {
                    SetProperty(demo.scannerDevice,
                        IBSU_PropertyId.ENUM_IBSU_PROPERTY_ENABLE_SPOOF,
                        'TRUE',
                        function (bSuccess) {
                            if (!bSuccess) return; // Error message already shown

                        });
                    // ---  Set the Sensitivity as per the text box
                    if ((document.getElementById("txtSpoofSensi").value) !== "") {
                        if (between(Number(document.getElementById("txtSpoofSensi").value), 1, 10)) {
                            SetProperty(demo.scannerDevice,
                                IBSU_PropertyId.ENUM_IBSU_PROPERTY_SPOOF_LEVEL,
                                (document.getElementById("txtSpoofSensi").value),
                                function (bSuccess) {
                                    if (!bSuccess) return; // Error message already shown
                                    strSpoofStatus = "Spoof Enabled; Sensitivity: " +
                                        (document.getElementById("txtSpoofSensi").value);
                                    SetStatusSpoofMessage(strSpoofStatus);
                                });
                        }
                    }
                } else {
                    strSpoofStatus = "Spoof Disabled";
                }
            }


            //  -------------------------------------------OPEN DEVICE----------------------------------



            function OpenDevice(deviceIndex, needClearPlaten, onCompletionCallback) {
                if (typeof (demo.scannerDevice) !== 'undefined') {
                    EnableStopButton(true);
                    EnableTakeImageButton(true);
                    onCompletionCallback();
                    return; // already open
                }

                IBSU.OpenDevice(deviceIndex, needClearPlaten, function onSuccess(handle) {
                    demo.scannerDevice = handle;

                    QueryImageDimensions(function QueryComplete() {
                        EnableStopButton(true);
                        EnableTakeImageButton(true);
                        onCompletionCallback();
                    });
                }, function onError(errorObj) {
                    EnableStartButton(true);
                    EnableSettings(true);
                    SetStatusMessage('Unable to open device #' + deviceIndex + ': ' + errorObj.message + '(' + errorObj.code + ')');

                });

            }

            function CloseDevice(deviceHandle) {
                if (typeof (deviceHandle) !== 'undefined') {

                    IBSU.CloseDevice(deviceHandle, function onSuccess() {

                    }, function onError(errorObj) {
                        SetStatusMessage('Unable to close device #' + deviceHandle + ': ' + errorObj.message + '(' + errorObj.code + ')');
                        WriteFunctionResult(funcName, errorObj.code, errorObj.message);
                    });
                }

            }

            function GetLEDs(deviceHandle) {
                let funcName = "IBSU.GetLEDs";
                IBSU.GetLEDs(deviceHandle, function onSuccess(activeLEDs) {
                    var message = "Active LEDs: 0x" + activeLEDs.toString(16);
                    SetStatusMessage(message);

                }, function onError(errorObj) {
                    SetStatusMessage("Unable to get LEDs: " + errorObj.message + '(' + errorObj.code + ')');
                    WriteFunctionResult(funcName, errorObj.code, errorObj.message);
                });

            };

            function SetLEDs(deviceHandle, activeLEDs) {
                let funcName = "IBSU.SetLEDs";
                IBSU.SetLEDs(deviceHandle, activeLEDs, function onSuccess() {
                    var message = "LEDs were set to 0x" + activeLEDs.toString(16);
                    SetStatusMessage(message);

                }, function onError(errorObj) {
                    SetStatusMessage("Unable to set LEDs: " + errorObj.message + '(' + errorObj.code + ')');
                    WriteFunctionResult(funcName, errorObj.code, errorObj.message);
                });

            };



            // ----------------------------------  Helper Functions --------------------------------------

            function IBSU_SetProcessingOptions(width, height, nfiq, onCompletionCallback) {
                let funcName = "IBSU.SetProcessingOptions";
                IBSU.SetProcessingOptions(width, height, nfiq, function onSuccess() {
                    onCompletionCallback(true);

                }, function onError(errorObj) {
                    SetStatusMessage("Unable to set processing options: " + errorObj.message + '(' + errorObj.code + ')');
                    WriteFunctionResult(funcName, errorObj.code, errorObj.message);
                    onCompletionCallback(false);

                });
            }


            // NOTE: this works, but is too slow to use at frame preview rates.  Rolling
            // info is sent with preview in this application
            function BGetRollingInfo(deviceHandle, onCompletionCallback) {
                let funcName = "IBSU.BGetRollingInfo";
                IBSU.BGetRollingInfo(deviceHandle, function onSuccess(rollingInformation) {
                    onCompletionCallback(true, rollingInformation);

                }, function onError(errorObj) {
                    SetStatusMessage("Unable to get rolling information: " + errorObj.message + '(' + errorObj.code + ')');
                    WriteFunctionResult(funcName, errorObj.code, errorObj.message);
                    onCompletionCallback(false, undefined);

                });
            }



            function IBSU_IsCaptureAvailable(deviceHandle, imageType, imageResolution, onCompletionCallback) {

                IBSU.IsCaptureAvailable(deviceHandle, imageType, imageResolution, function onSuccess(bIsAvailable) {
                    onCompletionCallback(bIsAvailable);

                }, function onError(errorObj) {
                    SetStatusMessage("Unable to get capture available status: " + errorObj.message + '(' + errorObj.code + ')');
                    WriteFunctionResult(funcName, errorObj.code, errorObj.message);
                    onCompletionCallback(false);

                });
            }

            function IBSU_BeginCaptureImage(deviceHandle, imageType, imageResolution, captureOptions, onCompletionCallback) {

                IBSU.BeginCaptureImage(deviceHandle, imageType, imageResolution, captureOptions, function onSuccess() {

                    onCompletionCallback(true, "");

                }, function onError(errorObj) {
                    var message = "Unable to start capture: " + errorObj.message + '(' + errorObj.code + ')';
                    onCompletionCallback(false, message);

                });
            }


            function IBSU_CancelCaptureImage(deviceHandle) {
                IBSU.CancelCaptureImage(deviceHandle, function onSuccess() {
                    //    WriteFunctionResult(funcName, 0, 'Capture cancelled');

                }, function onError(errorObj) {
                    //   WriteFunctionResult(funcName, errorObj.code, errorObj.message);

                });

            }


            // onCompletion is optional function
            function SetBeeper(handle, beepPattern, soundTone, duration, reserved_1, reserved_2) {
                IBSU.SetBeeper(handle, beepPattern, soundTone, duration, reserved_1, reserved_2, function onSuccess() {

                }, function onError(errorObj) {
                    SetStatusMessage("Unable to set beeper: " + errorObj.message + '(' + errorObj.code + ')');
                    WriteFunctionResult(funcName, errorObj.code, errorObj.message);
                });

            };

            function GetOperableLEDs(deviceHandle) {
                let funcName = "GetOperableLEDs";
                IBSU.GetOperableLEDs(deviceHandle, function onSuccess(ledInfo) {
                    var message = "LED type: " + ledInfo.LedType + ", LED Count: " + ledInfo.LedCount + ", Operable LEDs: 0x" + ledInfo.OperableLEDs.toString(16);
                    SetStatusMessage(message);

                }, function onError(errorObj) {
                    SetStatusMessage("Unable to get operable LEDs: " + errorObj.message + '(' + errorObj.code + ')');
                    WriteFunctionResult(funcName, errorObj.code, errorObj.message);
                });

            };


            function IBSU_GetOperableBeeper(deviceHandle, completionCallback) {
                IBSU.GetOperableBeeper(deviceHandle, function onSuccess(beeperType) {
                    completionCallback(true, beeperType);

                }, function onError(errorObj) {
                    //  Expected error type, device not capable - SetStatusMessage("Unable to get operable Beeper: " + errorObj.message + '(' + errorObj.code + ')');
                    completionCallback(false, undefined);
                });

            };

            // Set the little picture of the scanner based on the product name;  images in /images folder
            function funcScannerImage(strScannerImgName) {
                if (strScannerImgName === "KOJAK") {
                    document.getElementById("spanScannerImage").innerHTML =
                        '<img src="/wwwroot/images/IBSU_Kojak.png" width="115" height="124" style="position: absolute;"/>';
                }

                if (strScannerImgName === "WATSON MINI") {
                    document.getElementById("spanScannerImage").innerHTML =
                        '<img src="/wwwroot/images/IBSU_Watson.png" width="115" height="124" style="position: absolute;"/>';
                }
                if (strScannerImgName === "COLUMBO") {
                    document.getElementById("spanScannerImage").innerHTML =
                        '<img src="/wwwroot/images/IBSU_Columbo.png" width="115" height="124" style="position: absolute;"/>';
                }

            }

            // Function array to fill dropdown list by querying devices
            var dropdownFillFunctions = [];


            // Query device type and add to dropdown list
            function ShowDeviceInfo(index) {

                GetDeviceDescription(index, function (index, devDescription) {
                    var strDevice = devDescription.productName;
                    funcScannerImage(devDescription.productName);
                    var strDevice2 = devDescription.productName + "<br /> Version: " + devDescription.fwVersion + "<br /> Serial Number: " + devDescription.serialNumber;
                    document.getElementById("spanDeviceDescription").innerHTML = strDevice2;
                    demo.deviceDesc.push(devDescription);
                    var opt = document.createElement('option');
                    opt.value = index;
                    if (index == 0) opt.selected = true;
                    opt.innerHTML = strDevice;
                    var select = document.getElementById("scanners");
                    select.appendChild(opt);

                    demo.isDeviceLocked = devDescription.IsDeviceLocked;
                    ShowDeviceLockStatus();

                    if (index == demo.connectedDeviceCount - 1) {
                        // Last one now present - set capture options
                        SetCaptureOptions();
                    } else {
                        dropdownFillFunctions[index + 1](); // Execute next loop iteration
                    }
                });

            }


            function ShowDeviceLockStatus() {
                document.getElementById("spanDeviceLocked").innerHTML = "Locked: " + demo.isDeviceLocked;
                document.getElementById("txtCustomerKey").disabled = !demo.isDeviceLocked;  // Ask for customer key if locked
            }

            // Clear and re-query for identifying information for all devices
            function ReloadDeviceList() {
                CloseDevice(demo.scannerDevice); // Inc case it was open
                demo.scannerDevice = undefined;

                demo.deviceDesc = [];
                document.getElementById("spanSpoofEnabled").innerHTML = "";
                document.getElementById("spanEncryptEnabled").innerHTML = "";
                document.getElementById("spanDeviceDescription").innerHTML = "";


                // Query device names
                dropdownFillFunctions = [];

                var select = document.getElementById("scanners");
                select.options.length = 0;//remove all options

                for (let i = 0; i < demo.connectedDeviceCount; i++) {
                    dropdownFillFunctions[i] = ShowDeviceInfo.bind(null, i);
                }

                if (demo.connectedDeviceCount == 0) {
                    // SetCaptureOptions() if loop didn't run
                    SetCaptureOptions();
                } else {
                    dropdownFillFunctions[0](); // Start fill loop iterations
                }

            }

            function GetImageTypeName(imageType) {
                var imgTypeName = "-- Unknown --";
                switch (imageType) {
                    case IBSU_ImageType.ENUM_IBSU_ROLL_SINGLE_FINGER:
                        imgTypeName = "-- Rolling single finger --";
                        break;
                    case IBSU_ImageType.ENUM_IBSU_FLAT_SINGLE_FINGER:
                        imgTypeName = "-- Flat single finger --";
                        break;
                    case IBSU_ImageType.ENUM_IBSU_FLAT_TWO_FINGERS:
                        imgTypeName = "-- Flat two fingers --";
                        break;
                    case IBSU_ImageType.ENUM_IBSU_FLAT_FOUR_FINGERS:
                        imgTypeName = "-- Flat 4 fingers --";
                        break;
                    default:
                        break;
                }
                return imgTypeName;
            }

            function SetProperty(deviceHandle, propertyType, propertyValue, onCompletionCallback) {
                let funcName = "SetProperty";
                IBSU.SetProperty(deviceHandle, propertyType, propertyValue, function onSuccess() {
                    onCompletionCallback(true);

                }, function onError(errorObj) {
                    SetStatusMessage("Unable to set property " + propertyType + " to " + propertyValue + ": " + errorObj.message + '(' + errorObj.code + ')');
                    WriteFunctionResult(funcName, errorObj.code, errorObj.message);
                    onCompletionCallback(false);

                });
            }


            function GetProperty(deviceHandle, propertyType, showError, onCompletionCallback) {
                let funcName = "GetProperty";
                IBSU.GetProperty(deviceHandle, propertyType, function onSuccess(propertyValue) {
                    onCompletionCallback(true, propertyValue);

                }, function onError(errorObj) {
                    if (showError) {
                        SetStatusMessage("Unable to Get property " + propertyType + ": " + errorObj.message + '(' + errorObj.code + ')');
                        WriteFunctionResult(funcName, errorObj.code, errorObj.message);
                    }
                    onCompletionCallback(false, undefined);

                });
            }

            function SetContrast(deviceHandle, contrastValue) {
                let funcName = "SetContrast";
                IBSU.SetContrast(deviceHandle, contrastValue, function onSuccess() {
                    WriteFunctionResult(funcName, 0, 'Contrast Value set to ' + contrastValue);
                }, function onError(errorObj) {
                    WriteFunctionResult(funcName, errorObj.code, errorObj.message);
                });
            }



            function GetContrast(deviceHandle, onCompletionCallback) {
                let funcName = "GetContrast";
                IBSU.GetContrast(deviceHandle, function onSuccess(contrastValue) {
                    WriteFunctionResult(funcName, 0, 'Conctrast Value: ' + contrastValue);

                    //document.getElementById("idContrastValue").value = contrastValue;
                    onCompletionCallback(contrastValue);

                }, function onError(errorObj) {
                    WriteFunctionResult(funcName, errorObj.code, errorObj.message);
                });
            }




            // -------------------------------------------------------------------------------------------------------
            // Callbacks from IBScanUltimate Web SDK interface
            IBSU.onSDKConnection = function () {
                SetStatusMessage("Library connection Successful");
            }
            IBSU.onSDKClose = function (event) {
                SetStatusMessage('SDK Connection closed. Code: ' + event.code + '. Reason: ' + event.reason);
            }

            IBSU.onSDKConnectionError = function (event) {
                SetStatusMessage('SDK Socket connect error');
            }

            function resizeBase64Img(base64, width, height) {

                var canvas = document.createElement("canvas");
                canvas.width = width;
                canvas.height = height;
                var context = canvas.getContext("2d");
                var deferred = $.Deferred();
                $("<img/>").attr("src", "data:image/png;base64," + base64).load(function () {
                    context.scale(width / this.width, height / this.height);
                    context.drawImage(this, 0, 0);
                    deferred.resolve($("<img/>").attr("src", canvas.toDataURL()));
                });
                return deferred.promise();
            }





            IBSU.onResultImageEx = function (deviceHandle, imageStatus, scannerImage, imageType, detectedFingerCount, scannerImageArray, segmentArray, nfiqArray) {

                // scannerImage is in Bitmap format
                
                var imgTypeName = GetImageTypeName(imageType);

                var message = "";
                if (imageStatus >= IBSU_STATUS_OK) {

                    if (document.getElementById("cbDrawSegmentImage").checked) {
                        DrawResultQuadrangles(segmentArray);
                    }

                    ShowNFIQ(nfiqArray);

                    if (imageType == IBSU_ImageType.ENUM_IBSU_ROLL_SINGLE_FINGER) {
                        //BeepOK();
                        var imageElement = document.getElementById("idFpImage");

                        imageElement.setAttribute('src', "data:image/png;base64," + scannerImage.StrImageBitmapBase64);
                    }

                    if (imageStatus == IBSU_STATUS_OK || imageStatus == 303) {

                        message = imgTypeName + " acquisition successful";

                        var ObjectHands_Segmntation = localStorage.getItem("KK");

                        var EndObjSegmnstation = JSON.parse(ObjectHands_Segmntation);

                        //Call Windows Service Semntation


                        resizeBase64Img(scannerImage.StrImageBitmapBase64, 1600, 1500).then(function (newImg) {
                            
                            var NewImage = newImg[0].src;

                            if (EndObjSegmnstation.Thumbs != undefined) {

                                EndObjSegmnstation.Thumbs.image.dataBytes = NewImage.split(",")[1];
                            } else {
                                EndObjSegmnstation.Hand.image.dataBytes = NewImage.split(",")[1];
                            }


                            if (TypeId == 3) {

                                $.ajax({
                                    url: ApiSendFingerToSegmntationEndPoint2,
                                    type: "post",
                                    processData: false,
                                    dataType: "json",
                                    contentType: "application/json",
                                    data: JSON.stringify(EndObjSegmnstation),

                                    success: function (response) {


                                        const formData = new FormData();
                                        formData.append('base64imageObj', response);
                                        formData.append('CASE_ID', CASEID);
                                        axios.post(urlSaveFingerPrint, formData)
                                            .then(res => {
                                                

                                                window.close();
                                                //if (res.data.length > 0) {
                                                //    for (var x = 0; x < res.data.length; x++) {

                                                //        if (res.data[x] == res.data[0]) {
                                                //            console.log('بصمة الابهام اليسرى');
                                                //        } else if (res.data[x] == res.data[1]) {
                                                //            console.log('بصمةالابهام اليمنى ');
                                                //        } else if (res.data[x] == res.data[2]) {
                                                //            console.log('بصمة الوسطى اليد اليسرى');
                                                //        } else if (res.data[x] == res.data[3]) {
                                                //            console.log('بصمة السبابه اليد اليسرى');
                                                //        }
                                                //        window.close();
                                                //        SiebelApp = top.parent.SiebelApp;
                                                //        var sBusService = SiebelApp.S_App.GetService("OUT Common Business Service");

                                                //        if (sBusService) {
                                                //            //Create new property set
                                                //            var Inputs = SiebelApp.S_App.NewPropertySet();
                                                //            var Outputs = SiebelApp.S_App.NewPropertySet();
                                                //            /*-------LOG --------*/
                                                //            console.log(response);
                                                //            console.log(CASEID);
                                                //            /*-------------------*/
                                                //            Inputs.SetProperty("FilePath", res.data[x]);
                                                //            if (res.data[x] == res.data[0]) {
                                                //                Inputs.SetProperty("FileDescARA", 'بصمة البنصر اليد اليسرى');
                                                //            } else if (res.data[x] == res.data[1]) {
                                                //                Inputs.SetProperty("FileDescARA", 'بصمة الخنصر اليد اليسرى');
                                                //            } else if (res.data[x] == res.data[2]) {
                                                //                Inputs.SetProperty("FileDescARA", 'بصمة الوسطى اليد اليسرى');
                                                //            } else if (res.data[x] == res.data[3]) {
                                                //                Inputs.SetProperty("FileDescARA", 'بصمة السبابه اليد اليسرى');
                                                //            }
                                                //            Inputs.SetProperty("CaseId", CASEID);
                                                //            Inputs.SetProperty("RequestType", 'Case');
                                                //            // Inputs.SetProperty("Age", AGE);

                                                //            // Invoke the Business service Method and pass the Inputs
                                                //            Outputs = sBusService.InvokeMethod("AddAttachmentToFileSystem", Inputs);



                                                //            OUT_REFRESH_ATT(CASEID);



                                                //        }
                                                //        else {

                                                //            alert("Business Service Not Found");
                                                //        }


                                                //    }
                                                //    alert("تم حفظ البصمات اليد اليسرى بنجاح");
                                                // }
                                                // alert("تم التقاط بصمات اليد اليمنى بنجاح");

                                            })
                                            .catch((error) => {


                                                console.error(error)
                                            });




                                    }
                                });

                            } else {
                                var formdataHands = new FormData();

                                formdataHands.append("handString", EndObjSegmnstation);

                                $.ajax({
                                    url: ApiSendFingerToSegmntation,
                                    type: "post",
                                    processData: false,
                                    dataType: "json",
                                    contentType: "application/json",
                                    data: JSON.stringify(EndObjSegmnstation),

                                    success: function (response) {

                                        
                                        if (response == "101") {
                                            alert("البصمات المرفقه غير مطابقه مع البصمات المختارة");
                                        } else {



                                            if (TypeId == 1) {

                                                const formData1 = new FormData();
                                                formData1.append('base64imageObj', response);
                                                formData1.append('CASE_ID', CASEID);

                                                axios.post(urlSaveFingerPrint, formData1)
                                                    .then(res => {
                                                        

                                                        if (res.data.length > 0) {
                                                            for (var x = 0; x < res.data.length; x++) {


                                                                if (res.data[x] == res.data[0]) {
                                                                    console.log('بصمة السبابه اليد اليمنى');
                                                                } else if (res.data[x] == res.data[1]) {
                                                                    console.log('بصمة الوسطى اليد اليمنى');
                                                                } else if (res.data[x] == res.data[2]) {
                                                                    console.log('بصمة الخنصر اليد اليمنى');
                                                                } else if (res.data[x] == res.data[3]) {
                                                                    console.log('بصمة البنصر اليد اليمنى');
                                                                }


                                                                window.close();
                                                                SiebelApp = top.parent.SiebelApp;
                                                                var sBusService = SiebelApp.S_App.GetService("OUT Common Business Service");
                                                                
                                                                if (sBusService) {
                                                                    //Create new property set
                                                                    var Inputs = SiebelApp.S_App.NewPropertySet();
                                                                    var Outputs = SiebelApp.S_App.NewPropertySet();
                                                                    /*-------LOG --------*/
                                                                    console.log(response);
                                                                    console.log(CASEID);
                                                                    /*-------------------*/
                                                                    Inputs.SetProperty("FilePath", res.data[x]);
                                                                    if (res.data[x] == res.data[0]) {
                                                                        Inputs.SetProperty("FileDescARA", 'بصمة السبابه اليد اليمنى');
                                                                    } else if (res.data[x] == res.data[1]) {
                                                                        Inputs.SetProperty("FileDescARA", 'بصمة الوسطى اليد اليمنى');
                                                                    } else if (res.data[x] == res.data[2]) {
                                                                        Inputs.SetProperty("FileDescARA", 'بصمة الخنصر اليد اليمنى');
                                                                    } else if (res.data[x] == res.data[3]) {
                                                                        Inputs.SetProperty("FileDescARA", 'بصمة البنصر اليد اليمنى');
                                                                    }
                                                                    Inputs.SetProperty("CaseId", CASEID);
                                                                    //Inputs.SetProperty("Age", AGE);
                                                                    Inputs.SetProperty("RequestType", 'Case');
                                                                    // Invoke the Business service Method and pass the Inputs
                                                                    Outputs = sBusService.InvokeMethod("AddAttachmentToFileSystem", Inputs);
                                                                    


                                                                    OUT_REFRESH_ATT(CASEID);
                                                                    console.log(Outputs);

                                                                }
                                                                else {

                                                                    alert("Business Service Not Found");
                                                                }


                                                            }
                                                            alert("تم حفظ بصمات اليد اليمنى بنجاح");
                                                        }
                                                        //  alert("تم التقاط بصمات اليد اليمنى بنجاح");

                                                    })
                                                    .catch((error) => {


                                                        console.error(error)
                                                    });


                                            }
                                            else if (TypeId == 2) {




                                                const formData = new FormData();
                                                formData.append('base64imageObj', response);
                                                formData.append('CASE_ID', CASEID);
                                                axios.post(urlSaveFingerPrint, formData)
                                                    .then(res => {
                                                        


                                                        if (res.data.length > 0) {
                                                            for (var x = 0; x < res.data.length; x++) {

                                                                if (res.data[x] == res.data[0]) {
                                                                    console.log('بصمة البنصر اليد اليسرى');
                                                                } else if (res.data[x] == res.data[1]) {
                                                                    console.log('بصمة الخنصر اليد اليسرى ');
                                                                } else if (res.data[x] == res.data[2]) {
                                                                    console.log('بصمة الوسطى اليد اليسرى');
                                                                } else if (res.data[x] == res.data[3]) {
                                                                    console.log('بصمة السبابه اليد اليسرى');
                                                                }
                                                                window.close();
                                                                SiebelApp = top.parent.SiebelApp;
                                                                var sBusService = SiebelApp.S_App.GetService("OUT Common Business Service");

                                                                if (sBusService) {
                                                                    //Create new property set
                                                                    var Inputs = SiebelApp.S_App.NewPropertySet();
                                                                    var Outputs = SiebelApp.S_App.NewPropertySet();
                                                                    /*-------LOG --------*/
                                                                    console.log(response);
                                                                    console.log(CASEID);
                                                                    /*-------------------*/
                                                                    Inputs.SetProperty("FilePath", res.data[x]);
                                                                    if (res.data[x] == res.data[0]) {
                                                                        Inputs.SetProperty("FileDescARA", 'بصمة البنصر اليد اليسرى');
                                                                    } else if (res.data[x] == res.data[1]) {
                                                                        Inputs.SetProperty("FileDescARA", 'بصمة الخنصر اليد اليسرى');
                                                                    } else if (res.data[x] == res.data[2]) {
                                                                        Inputs.SetProperty("FileDescARA", 'بصمة الوسطى اليد اليسرى');
                                                                    } else if (res.data[x] == res.data[3]) {
                                                                        Inputs.SetProperty("FileDescARA", 'بصمة السبابه اليد اليسرى');
                                                                    }
                                                                    Inputs.SetProperty("CaseId", CASEID);
                                                                    Inputs.SetProperty("RequestType", 'Case');
                                                                    // Inputs.SetProperty("Age", AGE);

                                                                    // Invoke the Business service Method and pass the Inputs
                                                                    Outputs = sBusService.InvokeMethod("AddAttachmentToFileSystem", Inputs);



                                                                    OUT_REFRESH_ATT(CASEID);



                                                                }
                                                                else {

                                                                    alert("Business Service Not Found");
                                                                }


                                                            }
                                                            alert("تم حفظ البصمات اليد اليسرى بنجاح");
                                                        }
                                                        // alert("تم التقاط بصمات اليد اليمنى بنجاح");

                                                    })
                                                    .catch((error) => {


                                                        console.error(error)
                                                    });

                                            }
                                        }
                                    },

                                    error: function (e) {

                                        var xxx = e
                                        if (confirm("قد يكون الجهاز غير متوفر او الخدمة متوقفة أو أنه لم يتم تثبيتها . هل تود تحميل تعريف الإصدار الأحدث من الخدمة؟")) {
                                            window.open("/AFIS_FingerPrint/files/FingerPrintSetup.msi", "_base");
                                        }
                                    }
                                });
                                
                            }
                        });



                    }
                    else {
                        message = "  !!Capture Warning!! (-- Warning Code " + imageStatus + " --) ";
                        let confirmMessage = message;
                        if (IBSU_Warnings[imageStatus]) confirmMessage += IBSU_Warnings[imageStatus];

                        let rollingLineElem = document.getElementById('idRollingLine');
                        rollingLineElem.style.opacity = 0.0; // Hide rolling line
                        
                        //if (confirm("  " + confirmMessage + ".  Recapture Image?")) {
                        //    Start();
                        //    return;
                        //} else {
                        //    
                        //}
                    }

                } else {
                    message = imgTypeName + " --Capture Failed-- ( Error code = " + imageStatus + " ) ";
                }
                SetStatusMessage(message);

                demo.captureInProgress = false;
                EnableStartButton(true);
                EnableSettings(true);
                EnableStopButton(false);
                EnableTakeImageButton(false);
                var message = "No Active Capture";
                document.getElementById("instructionsID").innerHTML = message;
                SetStatusMessage("Capture Ready");
                ClearQualityIndicators();

            }


            function ShowNFIQ(nfiqArray) {
                if (document.getElementById("cbNFIQ").checked) {
                    var separator = '';
                    var nfiqString = "";
                    var i = 0;
                    for (i = 0; i < nfiqArray.length; i++) {
                        nfiqString += separator + nfiqArray[i];
                        separator = "-";
                    }

                    document.getElementById("idNFIQResults").innerHTML = " NFIQ Score: " + nfiqString + "  ";
                }
            }

            function DrawResultQuadrangles(segmentArray) {

                // Scale from device to display
                var xScale = demo.viewWidth / demo.scanDeviceWidth;
                var yScale = demo.viewHeight / demo.scanDeviceHeight;

                var i = 0;
                for (i = 0; i < segmentArray.length; i++) {
                    quadrangle = segmentArray[i];

                    var quadranglePoints =
                        quadrangle.x1 * xScale + "," + quadrangle.y1 * yScale + " " +
                        quadrangle.x2 * xScale + "," + quadrangle.y2 * yScale + " " +
                        quadrangle.x3 * xScale + "," + quadrangle.y3 * yScale + " " +
                        quadrangle.x4 * xScale + "," + quadrangle.y4 * yScale + " " +
                        quadrangle.x1 * xScale + "," + quadrangle.y1 * yScale;

                    var elementName = "idQuadrangle" + i;
                    var quadrangleElement = document.getElementById(elementName);
                    quadrangleElement.setAttribute("points", quadranglePoints);
                    quadrangleElement.style.opacity = 1.0;
                }

            }



            IBSU.onPreviewImage = function (deviceHandle, imageData, rollingInformation) {

                var imageElement = document.getElementById("idFpImage");
                imageElement.setAttribute('src', "data:image/png;base64," + imageData.StrImagePngBase64);

                // Notes: Scan image dimensions can vary based on captureType
                //   - For preview, bitmap is always scaled to the view dimensions, but original attributes are still passed in 'imageData' object
                demo.scanDeviceWidth = imageData.Width;
                demo.scanDeviceHeight = imageData.Height;

                if (demo.captureInfo.ImageType == IBSU_ImageType.ENUM_IBSU_ROLL_SINGLE_FINGER)
                    DrawRollingLine(rollingInformation);

            }

            function DrawRollingLine(rollingInformation) {

                if (!rollingInformation) return;  // Not yet active

                if (rollingInformation.RollingLineX <= 0 || rollingInformation.RollingLineX >= demo.scanDeviceWidth) return;

                var rollingLineColor = "black";
                switch (rollingInformation.RollingState) {

                    case IBSU_RollingState.ENUM_IBSU_ROLLING_TAKE_ACQUISITION:
                        rollingLineColor = "red";
                        break;

                    case IBSU_RollingState.ENUM_IBSU_ROLLING_COMPLETE_ACQUISITION:
                        rollingLineColor = "green";
                        break;

                    default:
                        return;
                }


                var rollingLineElem = document.getElementById('idRollingLine');
                rollingLineElem.style.stroke = rollingLineColor;
                var lineXPosition = rollingInformation.RollingLineX * demo.viewWidth / demo.scanDeviceWidth;
                rollingLineElem.setAttribute("y2", demo.viewHeight);
                rollingLineElem.setAttribute("x1", lineXPosition);
                rollingLineElem.setAttribute("x2", lineXPosition);
                rollingLineElem.style.opacity = 1.0; // Ensure visibility

            }

            IBSU.onPressedKeyButtons = function (deviceIndex, pressedKeyButtons) {
                var message;
                message = "OnEvent_PressedKeyButtons = " + pressedKeyButtons;
                SetStatusMessage(message);

                if (pressedKeyButtons == __LEFT_KEY_BUTTON__) {
                    if (!demo.captureInProgress) {
                        SetBeeper(deviceHandle, ENUM_IBSU_BEEP_PATTERN_GENERIC, 2/*Sol*/, 4/*100ms = 4*25ms*/, 0, 0);
                        // CaptureStartClick();
                    }
                }
                else if (pressedKeyButtons == __RIGHT_KEY_BUTTON__) {
                    if ((demo.captureInProgress)) {
                        SetBeeper(deviceHandle, ENUM_IBSU_BEEP_PATTERN_GENERIC, 2/*Sol*/, 4/*100ms = 4*25ms*/, 0, 0);
                        //CaptureStopClick();
                    }
                }

            }


            IBSU.onNotifyMessage = function (deviceHandle, notifyMessage) {

                SetStatusMessage('NotifyMessage: ' + notifyMessage);

            }



            IBSU.onClearPlatenAtCapture = function (deviceIndex, platenState) {

                if (platenState == IBSU_PlatenState.ENUM_IBSU_PLATEN_HAS_FINGERS)
                    demo.clearPlatenWarning = true;
                else
                    demo.clearPlatenWarning = false;

                if (demo.clearPlatenWarning) {
                    var message = "Please remove your fingers on the platen first!";
                    document.getElementById("instructionsID").innerHTML = message;
                }
                else {
                    // Display message for image acquisition again
                    SetStatusMessage(demo.captureInfo.PreCaptureMessage);
                    document.getElementById("instructionsID").innerHTML = demo.captureInfo.PreCaptureMessage;
                    ShowImageQuadrangle(false);

                    //if (!chkAutoCapture.Checked)
                    //    strMessage += String.Format("\r\nPress button 'Take Result Image' when image is good!");

                }

            }

            IBSU.onCompleteAcquisition = function (deviceHandle, imageType) {

                demo.captureInProgress = false;
                EnableStartButton(true);
                EnableSettings(true);
                EnableStopButton(false);
                EnableTakeImageButton(false);
                ClearQualityIndicators();

                if (imageType === 'ENUM_IBSU_ROLL_SINGLE_FINGER') {
                    BeepSuccess();
                }
                else {
                    BeepSuccess();
                    var message = "Remove fingers from sensor";
                    document.getElementById("instructionsID").innerHTML = message;
                    SetStatusMessage("Acquisition completed, postprocessing..");
                }

            }

            IBSU.onTakingAcquisition = function (deviceHandle, imageType) {
                if (imageType === 'ENUM_IBSU_ROLL_SINGLE_FINGER') {
                    BeepOK();
                    var message = "When done remove finger from sensor";
                    document.getElementById("instructionsID").innerHTML = message;
                }
            }

            IBSU.onDeviceCommunicationBreak = function (deviceIndex) {
                SetStatusMessage('Communications break');
                CloseDevice(demo.scannerDevice);
                demo.scannerDevice = undefined;

            }

            IBSU.onDeviceCount = function (deviceCount) {
                demo.connectedDeviceCount = deviceCount;
                document.getElementById("deviceCountID").innerHTML = deviceCount;
                ReloadDeviceList();
            };


            function ShowFingerQuality(fingerQualityArray) {
                // fingerQualityArray is array of 4 integers

                var i;
                for (i = 0; i < fingerQualityArray.length; i++) {
                    var fillColor = 'red';
                    var opacity = 1.0;

                    if (demo.clearPlatenWarning) {
                        if (!demo.isBlank) {
                            fillColor = 'red';
                        }
                        else {
                            opacity = 0.0;
                        }
                    }
                    else {

                        switch (fingerQualityArray[i]) {
                            case IBSU_FingerQualityState.ENUM_IBSU_QUALITY_GOOD:
                                fillColor = 'lime';  // Light green
                                break;
                            case IBSU_FingerQualityState.ENUM_IBSU_QUALITY_FAIR:
                                fillColor = 'orange';
                                break;
                            case IBSU_FingerQualityState.ENUM_IBSU_QUALITY_POOR:
                                fillColor = 'red';
                                break;
                            case IBSU_FingerQualityState.ENUM_IBSU_FINGER_NOT_PRESENT:
                                opacity = 0.0;
                                break;
                            case IBSU_FingerQualityState.ENUM_IBSU_QUALITY_INVALID_AREA_TOP:
                                fillColor = 'red';
                                break;
                            case IBSU_FingerQualityState.ENUM_IBSU_QUALITY_INVALID_AREA_LEFT:
                                fillColor = 'red';
                                break;
                            case IBSU_FingerQualityState.ENUM_IBSU_QUALITY_INVALID_AREA_RIGHT:
                                fillColor = 'red';
                                break;
                            default:
                                return;
                        }

                    }
                    var elementName = 'idQuality' + i;
                    document.getElementById(elementName).style.fill = fillColor;
                    document.getElementById(elementName).style.opacity = opacity;
                }
            };


            IBSU.onFingerQuality = function (deviceHandle, fingerQualityArray) {

                ShowFingerQuality(fingerQualityArray);
            };


            IBSU.onInitProgress = function (deviceIndex, progressValue) {

                var message = + progressValue + '%' + 'جار التجهيز';
                SetStatusMessage(message);
                if (progressValue === 100) {
                    SetStatusMessage("تم تهيئة الماسح الضوئي");

                }
            };

            IBSU.onFingerCount = function (deviceHandle, fingerCountState) {
                //document.getElementById("fingerCountID").innerHTML = fingerCountState;
                if (fingerCountState === 'ENUM_IBSU_NON_FINGER') {
                    //SetLEDs(deviceHandle, info, __LED_COLOR_RED__);   Future
                }
                else {
                    //SetLEDs(deviceHandle, info, __LED_COLOR_YELLOW__);   Future
                }

            };

            function SetCaptureOptions() {


                CloseDevice(demo.scannerDevice); // In case device was already open
                demo.scannerDevice = undefined;

                var select = document.getElementById("captureType");
                select.options.length = 0;//remove all options
                var index = document.getElementById("scanners").selectedIndex;
                if (demo.deviceDesc[index]) {
                    var product = demo.deviceDesc[index].productName.trim();

                    AddOption(select, -1, "Capture");

                    if ((product === "WATSON") ||
                        (product === "WATSON MINI") ||
                        (product === "SHERLOCK_ROIC") ||
                        (product === "SHERLOCK")) {

                        AddOption(select, IBSU_ImageType.ENUM_IBSU_FLAT_SINGLE_FINGER, CAPTURE_SEQ_FLAT_SINGLE_FINGER);
                        AddOption(select, IBSU_ImageType.ENUM_IBSU_ROLL_SINGLE_FINGER, CAPTURE_SEQ_ROLL_SINGLE_FINGER);
                        AddOption(select, IBSU_ImageType.ENUM_IBSU_FLAT_TWO_FINGERS, CAPTURE_SEQ_2_FLAT_FINGERS);
                        //m_cboCaptureSeq.Items.Add(CAPTURE_SEQ_10_SINGLE_FLAT_FINGERS);
                        //m_cboCaptureSeq.Items.Add(CAPTURE_SEQ_10_SINGLE_ROLLED_FINGERS);
                    }
                    else if ((product === "COLUMBO") ||
                        (product === "CURVE")) {
                        AddOption(select, IBSU_ImageType.ENUM_IBSU_FLAT_SINGLE_FINGER, CAPTURE_SEQ_FLAT_SINGLE_FINGER);
                        //m_cboCaptureSeq.Items.Add(CAPTURE_SEQ_10_SINGLE_FLAT_FINGERS);
                    }
                    else if ((product === "HOLMES") ||
                        (product === "KOJAK") ||
                        (product === "FIVE-0")) {
                        AddOption(select, IBSU_ImageType.ENUM_IBSU_FLAT_SINGLE_FINGER, CAPTURE_SEQ_FLAT_SINGLE_FINGER);
                        AddOption(select, IBSU_ImageType.ENUM_IBSU_ROLL_SINGLE_FINGER, CAPTURE_SEQ_ROLL_SINGLE_FINGER);
                        AddOption(select, IBSU_ImageType.ENUM_IBSU_FLAT_TWO_FINGERS, CAPTURE_SEQ_2_FLAT_FINGERS);
                        AddOption(select, IBSU_ImageType.ENUM_IBSU_FLAT_FOUR_FINGERS, CAPTURE_SEQ_4_FLAT_FINGERS);
                        //m_cboCaptureSeq.Items.Add(CAPTURE_SEQ_10_SINGLE_FLAT_FINGERS);
                        //m_cboCaptureSeq.Items.Add(CAPTURE_SEQ_10_SINGLE_ROLLED_FINGERS);
                        //m_cboCaptureSeq.Items.Add(CAPTURE_SEQ_10_FLAT_WITH_4_FINGER_SCANNER);
                    } else
                        alert("Unrecognized product name: (" + product + ")");



                    select.disabled = false;
                }
                else {
                    select.disabled = true;
                }
                SetStartStopButtons();
            }

            function AddOption(select, selValue, strText) {
                var opt = document.createElement('option');
                opt.value = selValue;
                opt.innerHTML = strText;
                select.appendChild(opt);
            }

            function SetStartStopButtons() {

                var captureTypeIndex;
                var deviceIndex = document.getElementById("scanners").selectedIndex;
                if (TypeId == 1) {
                    //  var captureTypeIndex = document.getElementById("captureType").selectedIndex;
                    document.getElementById("WichHandSelector").innerHTML = "التقاط بصمات اليد اليمنى";
                    document.getElementById("captureType").selectedIndex = 4;
                    captureTypeIndex = 4;
                } else if (TypeId == 2) {
                    document.getElementById("WichHandSelector").innerHTML = "التقاط بصمات اليد اليسرى";
                    document.getElementById("captureType").selectedIndex = 4;
                    captureTypeIndex = 4;
                } else if (TypeId == 3) {
                    document.getElementById("WichHandSelector").innerHTML = "التقاط بصمات الابهام";
                    document.getElementById("captureType").selectedIndex = 3;
                    captureTypeIndex = 3;
                }
                // First item is prompt only
                var enabled = (captureTypeIndex > 0) && (deviceIndex >= 0);
                EnableStartButton(enabled);
                EnableSettings(true);
                EnableStopButton(false);
                EnableTakeImageButton(false);
                // Start();
            }


            function ClearQuadrangles() {
                var i = 0;
                for (i = 0; i < 4; i++) {
                    var quadrangleElement = document.getElementById("idQuadrangle" + i);
                    quadrangleElement.style.opacity = 0.0;
                }

            }

            function ClearQualityIndicators() {
                var i;
                for (i = 0; i < 4; i++) {
                    var elementName = 'idQuality' + i;
                    document.getElementById(elementName).style.opacity = 0.0;
                }

                var rollingLineElem = document.getElementById('idRollingLine');
                rollingLineElem.style.opacity = 0.0; // Hide rolling line

            }

            function EnableStartButton(bEnable) {
                document.getElementById("btStart").disabled = !bEnable;
            }

            function EnableStopButton(bEnable) {
                document.getElementById("btStop").disabled = !bEnable;
            }

            function EnableTakeImageButton(bEnable) {
                document.getElementById("btTakeImage").disabled = !bEnable;
            }

            function EnableSettings(bEnable) {
                let elementIds = ["cbAutoContrast", "cbAutoCapture", "cbEnableEncrypt", "cbInvalidFinger",
                    "cbClearPlaten", "cbDrawSegmentImage", "cbNFIQ", "cbEnableSpoof", "cbDetectSmear", "txtSpoofSensi", "cboSmearLevel"];
                for (let i = 0; i < elementIds.length; i++) {
                    document.getElementById(elementIds[i]).disabled = !bEnable;
                }

            }


            // Set capture information record based on form selections
            function SetCaptureInfo() {
                var scannerElement = document.getElementById("scanners");
                var scannerOptionIndex = scannerElement.selectedIndex;
                var deviceIndex = Number(scannerElement.options[scannerOptionIndex].value);

                var select = document.getElementById("captureType");
                var captureTypeIndex = select.selectedIndex;
                if (captureTypeIndex <= 0) {
                    SetStatusMessage("Please select capture type");
                    return false;
                }
                demo.captureInfo.deviceIndex = deviceIndex;
                demo.captureInfo.ImageTypeText = select.options[captureTypeIndex].text;
                demo.captureInfo.ImageType = Number(select.options[captureTypeIndex].value);

                if (demo.captureInfo.ImageType == IBSU_ImageType.ENUM_IBSU_FLAT_SINGLE_FINGER) {
                    demo.captureInfo.PreCaptureMessage = "Place one finger on the scanner!";
                    demo.captureInfo.PostCaptureMessage = "Hold finger on the scanner!";
                    demo.captureInfo.NumberOfFinger = 1;
                    demo.captureInfo.fingerName = "SFF_Unknown";
                    SetStatusMessage("Capture In Process");
                } else if (demo.captureInfo.ImageType == IBSU_ImageType.ENUM_IBSU_ROLL_SINGLE_FINGER) {
                    demo.captureInfo.PreCaptureMessage = "Roll Capture: Place one finger FLAT on the scanner!";
                    SetStatusMessage("Roll Capture");
                    demo.captureInfo.PostCaptureMessage = "Roll finger!";
                    demo.captureInfo.NumberOfFinger = 1;
                    demo.captureInfo.fingerName = "SRF_Unknown";
                } else if (demo.captureInfo.ImageType == IBSU_ImageType.ENUM_IBSU_FLAT_TWO_FINGERS) {
                    demo.captureInfo.PreCaptureMessage = "Place two fingers on the scanner!";
                    demo.captureInfo.PostCaptureMessage = "Keep fingers on the sensor!";
                    demo.captureInfo.NumberOfFinger = 2;
                    demo.captureInfo.fingerName = "TFF_Unknown";
                    SetStatusMessage("Capture In Process");
                } else if (demo.captureInfo.ImageType == IBSU_ImageType.ENUM_IBSU_FLAT_FOUR_FINGERS) {
                    demo.captureInfo.PreCaptureMessage = "Place 4 fingers on the sensor!";
                    demo.captureInfo.PreCaptureMessage = "Keep fingers on the scanner!";
                    demo.captureInfo.NumberOfFinger = 4;
                    demo.captureInfo.fingerName = "4FF_Unknown";
                    SetStatusMessage("Capture In Process");
                }

                return true;
            }

            // Optimize image sizes for different scanner dimensions and aspect ratios
            function AdjustImageSizes() {

                // Small size for better performance at frame rate; preview sizes are best as an even divisor
                let divisor = 2;
                if (demo.scanDeviceWidth > 800) {
                    divisor = 4;
                }
                demo.previewWidth = demo.scanDeviceWidth / divisor;
                demo.previewHeight = demo.scanDeviceHeight / divisor;

                // Physical space available in web page view
                demo.viewWidth = 320;
                demo.viewHeight = 300;

                // Set HTML view image to same proportion as scanner
                var xScale = demo.scanDeviceWidth / demo.viewWidth;
                var yScale = demo.scanDeviceHeight / demo.viewHeight;

                var scale = yScale;
                if (xScale > yScale) {
                    scale = xScale;
                }

                demo.viewWidth = demo.scanDeviceWidth / scale;
                demo.viewHeight = demo.scanDeviceHeight / scale;

                var imageElement = document.getElementById("idFpImage");
                imageElement.height = demo.viewHeight;
                imageElement.width = demo.viewWidth;

                imageElement = document.getElementById("svgImageOverlays");
                imageElement.setAttribute("height", demo.viewHeight);
                imageElement.setAttribute("width", demo.viewWidth);

            }

            function ShowImageVewer() {
                var foo = document.getElementById('IV01');

                if (foo.style.display == '' || foo.style.display == 'none') {
                    foo.style.display = 'block';
                }
            }

            // ----------------  Begin Enable Capture ---------------------
            // Device is open and initialized... begin capture
            // This sequence of procedures handle the asynchronous flow
            // without excessive nesting.
            function Start() {
                if (!SetCaptureInfo()) return;
                ShowImageVewer();
                demo.clearPlatenWarning = false;

                ClearQuadrangles();
                document.getElementById("idNFIQResults").innerHTML = "";

                UnlockDevice();

                EnableStartButton(false);
                EnableSettings(false);
            }

            // Check for locked device and unlock if necessary, then proceed to open
            function UnlockDevice() {

                if (demo.isDeviceLocked) {
                    let customerKey = document.getElementById("txtCustomerKey").value;
                    if (!customerKey) {
                        alert("Device is locked, customer key required.");
                        return;
                    }
                    // Perform unlock
                    IBSU.SetCustomerKey(demo.captureInfo.deviceIndex, IBSU_HashType.ENUM_IBSU_HASH_TYPE_SHA256, customerKey,
                        function onSuccess() {
                            demo.isDeviceLocked = false; // Now unlocked
                            ShowDeviceLockStatus();
                            EnsureOpen();  // Proceed to open

                        }, function onError(errorObj) {
                            WriteFunctionResult("IBSU.SetCustomerKey", errorObj.code, errorObj.message);
                        }
                    );

                } else {
                    EnsureOpen();  // Proceed to open
                }
            }


            function EnsureOpen() {
                OpenDevice(demo.captureInfo.deviceIndex, document.getElementById("cbClearPlaten").checked, function OpenComplete() {
                    funcSetEncrypt();
                    funcGetSpoofSupport();
                    SetupSpoofing();
                    BeginCapture00();
                });

            }


            function BeginCapture00() {
                // Width, height
                let needNFIQ = document.getElementById("cbNFIQ").checked;

                AdjustImageSizes();

                IBSU_SetProcessingOptions(demo.previewWidth, demo.previewHeight, needNFIQ, function SetImageSizeComplete(success) {
                    if (!success) return;  // Error message already shown
                    BeginCapture01();
                });

            }



            function BeginCapture01() {

                if (demo.captureInfo.ImageType != IBSU_ImageType.ENUM_IBSU_ROLL_SINGLE_FINGER) {
                    // Don't send roll configuration to devices that don't support that mode
                    BeginCapture02();  // Next step
                    return;
                }

                if (document.getElementById("cbDetectSmear").checked) {
                    SetProperty(demo.scannerDevice, IBSU_PropertyId.ENUM_IBSU_PROPERTY_ROLL_MODE, '1', function (bSuccess) {
                        if (!bSuccess) return; // Error message already shown

                        var smearIndex = document.getElementById("cboSmearLevel").selectedIndex.toString();
                        SetProperty(demo.scannerDevice, IBSU_PropertyId.ENUM_IBSU_PROPERTY_ROLL_LEVEL, smearIndex, function (bSuccess) {
                            if (!bSuccess) return; // Error message already shown
                            BeginCapture02();  // Next step
                        });
                    });
                }
                else {
                    SetProperty(demo.scannerDevice, IBSU_PropertyId.ENUM_IBSU_PROPERTY_ROLL_MODE, '0', function (bSuccess) {
                        if (!bSuccess) return; // Error message already shown
                        BeginCapture02();  // Next step
                    });
                }

            }

            function BeginCapture02() {

                demo.beeperType = IBSU_BeeperType.ENUM_IBSU_BEEPER_TYPE_NONE;
                IBSU_GetOperableBeeper(demo.scannerDevice, function onCompletion(bSuccess, availableBeeperType) {
                    if (bSuccess) demo.beeperType = availableBeeperType;
                    BeginCapture03();
                });
            }

            function BeginCapture03() {

                var imgRes = IBSU_ImageResolution.ENUM_IBSU_IMAGE_RESOLUTION_500;
                IBSU_IsCaptureAvailable(demo.scannerDevice, demo.captureInfo.ImageType, imgRes, function (bAvailable) {
                    if (!bAvailable) {
                        var message = "The capture mode " + demo.captureInfo.ImageTypeText + " is not available";
                        //SetStatusMessage(message);
                        return;
                    }
                    BeginCapture04();
                });
            }


            function BeginCapture04() {

                // Start capture
                var captureOptions = 0;
                if (document.getElementById("cbAutoContrast").checked)
                    captureOptions |= IBSU_OPTION_AUTO_CONTRAST;
                if (document.getElementById("cbAutoCapture").checked)
                    captureOptions |= IBSU_OPTION_AUTO_CAPTURE;
                if (document.getElementById("cbInvalidFinger").checked)
                    captureOptions |= IBSU_OPTION_IGNORE_FINGER_COUNT;




                var imgRes = IBSU_ImageResolution.ENUM_IBSU_IMAGE_RESOLUTION_500;
                IBSU_BeginCaptureImage(demo.scannerDevice, demo.captureInfo.ImageType, imgRes, captureOptions, function (bStarted, errorMessage) {
                    if (bStarted) {
                        var instructions = demo.captureInfo.PreCaptureMessage;
                        if (!document.getElementById("cbAutoCapture").checked)
                            instructions += String.Format("\r\nPress button 'Take Result Image' when image is good!");
                        document.getElementById("instructionsID").innerHTML = instructions;
                        demo.captureInProgress = true;
                    } else {
                        SetStatusMessage(errorMessage);
                    }

                });
            }

            // ----------------  End Enable Capture ---------------------


            function ShowImageQuadrangle(bShow) {

                var imageDiv = document.getElementById("idFpImage");
                // style="border:1px solid black
                if (bShow) {
                    imageDiv.style.border = "10px solid red";
                } else {
                    imageDiv.style.border = "none";
                }
            }

            function ClearPlatenCheckTimer() {

                if (!demo.captureInProgress) return;

                if (demo.clearPlatenWarning) {
                    demo.isBlank = !demo.isBlank;
                    ShowFingerQuality([0, 0, 0, 0]);
                    ShowImageQuadrangle(demo.isBlank);
                }

            }

            // If device is open it must be closed and reopened
            // for clar platen to take effect
            function ResetClearPlaten() {
                CloseDevice(demo.scannerDevice); // Inc case it was open
                demo.scannerDevice = undefined;
            }


            function Stop() {
                CloseDevice(demo.scannerDevice);
                demo.scannerDevice = undefined;
                // Note: this runs before close completes
                EnableStartButton(true);
                EnableSettings(true);
                EnableStopButton(false);
                EnableTakeImageButton(false);
                var message = "No Active Capture";
                document.getElementById("instructionsID").innerHTML = message;
                SetStatusMessage("Capture Ready");


            }



            function TakeResultImageManually() {
                var funcName = 'IBSU.TakeResultImageManually';
                IBSU.TakeResultImageManually(demo.scannerDevice, function onSuccess() {
                    WriteFunctionResult(funcName, 0, 'Manual Image Requested');

                }, function onError(errorObj) {
                    WriteFunctionResult(funcName, errorObj.code, errorObj.message);
                });
            }


            window.setInterval(ClearPlatenCheckTimer, 500);


            function InitPage() {

                

                if (typeof (IBSU) == 'undefined') {
                    alert("Unable to connect to the Web SDK");
                    return;
                }

                try {

                    demo.okBeepSound = new Audio('/images/OK.mp3');
                    demo.successBeepSound = new Audio('/images/Success.mp3');
                }
                catch (err) {

                    document.getElementById("instructionsID").innerHTML =
                        'This page requires the browser sound function - ' + err.message +
                        ' <br />Sounds will play only if supported by the scanner.'
                }
                GetSDKVersion();
                GetDeviceCount();
            }</script>
        @*Left column*@
        <div class="templatemo-flex-row">
            <div style="display:none" class="templatemo-sidebar">
                <header class="templatemo-site-header">

                    <div class="square"></div>
                    <h1>IBSU Web</h1>

                    <div style="color: #04b0f0">
                        SDK Demonstration<br />
                        <span id="dllVersion">?.?</span><br /><br />
                        Device(s): <span id="deviceCountID">0</span><br />
                        <span id="spanDeviceDescription"></span><br />
                        <span id="spanSpoofEnabled"></span><br />
                        <span id="spanEncryptEnabled"></span><br />
                        <span id="spanDeviceLocked"></span><br />
                    </div>
                </header>

                <div class="mobile-menu-icon">
                    <i class="fa fa-bars"></i>
                </div>
                <nav class="templatemo-left-nav">
                    <ul>
                        <li><a href="#" class="active"><i class="fa fa-home fa-fw"></i>Documentation</a></li>
                        <li><a href="#"><i class="fa fa-bar-chart fa-fw"></i>Tools</a></li>
                        <li><a href="http://integratedbiometrics.force.com" target="_blank"><i class="fa fa-database fa-fw"></i>Support Portal</a></li>
                        <li><a href="http://www.integratedbiometrics.com" target="_blank"><i class="fa fa-database fa-fw"></i>integratedbiometrics.com</a></li>
                        <li><input type="button" value="GetProperty" onclick="funcSetEncrypt();"> </li>
                    </ul>
                </nav>
            </div>
            @*Main content*@
            <div class="templatemo-content col-1 light-gray-bg">
                <div class="templatemo-top-nav-container">
                    <div class="row">
                        <div class="IB_Logo_Circle-container">
                            <a href="https://integratedbiometrics.com/" target="_blank">
                                <img src="~/wwwroot/images/IBLogos/IB_Logo_Blk.png" alt="Profile Photo" class="img-responsive" width="180">
                            </a>
                        </div>

                        <div>
                            <span id="statusInfo" style="display:block; width:500px; word-wrap:break-word; color:white; font-size:24px;"></span>
                            <span id="WichHandSelector" style="display:block; width:500px; word-wrap:break-word; color:white; font-size:24px;"></span>
                        </div>
                    </div>
                </div>
                <div class="templatemo-content-container">
                    <div class="templatemo-flex-row">

                        <div id="IV01" class="templatemo-content-widget white-bg col-2" float: left">
                            <i class="fa fa-times"></i>

                            <h2 class="text-uppercase">Image Viewer</h2><hr>

                            <p></p>
                            <div style="position:relative">
                                Note: Image view elements idFpImage and svgImageOverlays adjusted at run time to match scanner
                                <img id="idFpImage" width="320" height="300">
                                <svg id="svgImageOverlays" y="0" width="320" height="300" style="position: absolute; z-index: 5; left: 0px; top: 15px;">
                                    <line id="idRollingLine" x1="150" y1="10" x2="150" y2="240" style="stroke: red; stroke-width: 2; opacity: 0.0" />
                                    <polygon id="idQuadrangle0" points="0,0 5,5 45,10 0,0" style="fill: none; stroke: green; stroke-width: 2; opacity: 0.0" />
                                    <polygon id="idQuadrangle1" points="0,0 5,5 45,10 0,0" style="fill: none; stroke: green; stroke-width: 2; opacity: 0.0" />
                                    <polygon id="idQuadrangle2" points="0,0 5,5 45,10 0,0" style="fill: none; stroke: green; stroke-width: 2; opacity: 0.0" />
                                    <polygon id="idQuadrangle3" points="0,0 5,5 45,10 0,0" style="fill: none; stroke: green; stroke-width: 2; opacity: 0.0" />
                                </svg>
                            </div>
                            <br />
                            <span id="idNFIQResults" style="position: relative; background-color: #04b0f0; color: whitesmoke; margin: 5px; font-size: medium"></span><br /><br />
                            <div id="instructionsID" style="position: relative; left: 5px; color: #04b0f0">No Active Capture</div><br />
                            <span id="statusSpoof" style="position: relative; left: 5px; color: #04b0f0"></span>

                        </div>
                        <div class="templatemo-content-widget white-bg col-1" style="float: left">
                            <i class="fa fa-times"></i>
                            <h2 class="text-uppercase">Capture Demonstration</h2>
                            <h3 class="text-uppercase margin-bottom-10">Basic Features</h3>
                            <div id="divFeatures" style="display:none; width: 320px; padding: 2px; background-color: #04b0f0; border-radius: 8px; text-align: left">
                                <div style="margin-left: 20px">
                                    <br />
                                    <input type="checkbox" id="cbAutoContrast" checked>&nbsp;&nbsp;Automatic Contrast
                                    <br />
                                    <input type="checkbox" id="cbAutoCapture" checked>&nbsp;&nbsp;Automatic Capture
                                    <br />
                                    <input type="checkbox" id="cbEnableEncrypt">&nbsp;&nbsp;Enable Encryption
                                    <br />
                                    <input type="checkbox" id="cbInvalidFinger" checked>&nbsp;&nbsp;Invalid Finger Count
                                    <br />
                                    <input type="checkbox" id="cbClearPlaten" onclick="ResetClearPlaten();">&nbsp;&nbsp;Enable Clear Platen
                                    <br />
                                    <input type="checkbox" id="cbDrawSegmentImage" checked>&nbsp;&nbsp;Image Segments
                                    <br />
                                    <input type="checkbox" id="cbNFIQ" checked>&nbsp;&nbsp;NFIQ 1.0 Score
                                    <br />
                                    Customer key:
                                    <input type="text" id="txtCustomerKey" disabled>
                                    <br />
                                    <input type="checkbox" id="cbEnableSpoof">&nbsp;&nbsp;Enable Spoof Algorithm&nbsp;&nbsp; Sensitivity&nbsp;<input type="text" id="txtSpoofSensi" style="width: 25px;" value="5" />
                                    <br />
                                    <input type="checkbox" id="cbDetectSmear" checked>&nbsp;&nbsp;Smear Detection
                                    &nbsp;&nbsp;
                                    <select id="cboSmearLevel">
                                        <option>LOW</option>
                                        <option selected>MEDIUM</option>
                                        <option>HIGH</option>
                                    </select>
                                    <br />&nbsp;
                                </div>
                            </div>
                            <br />
                            <h3>Scanner Feedback</h3>
                            <br />
                            <div id="idQualityItems" style="width: 320px; height: 124px; background-color: #04b0f0; border-radius: 8px">
                                <span id="spanScannerImage"></span>

                                <svg id="idSvgQuality" y="115" width="115" height="124" style="position: relative; left: 00px; top: 0px;">
                                    <rect id="idQuality0" x="12" y="26" rx="20" ry="20" width="20" height="80"
                                          style="fill: red; stroke: black; stroke-width: 1; opacity: 0.0" />
                                    <rect id="idQuality1" x="34" y="26" rx="20" ry="20" width="20" height="80"
                                          style="fill: red; stroke: black; stroke-width: 1; opacity: 0.0" />
                                    <rect id="idQuality2" x="56" y="26" rx="20" ry="20" width="20" height="80"
                                          style="fill: red; stroke: black; stroke-width: 1; opacity: 0.0" />
                                    <rect id="idQuality3" x="78" y="26" rx="20" ry="20" width="20" height="80"
                                          style="fill: red; stroke: black; stroke-width: 1; opacity: 0.0" />
                                </svg>

                                <div id="ScanControlForm" style="width: 175px; padding: 2px; border-radius: 8px; float:right">
                                    <br />
                                    <form style="display:none">
                                        <select id="scanners" onchange="SetCaptureOptions();"></select>
                                        &nbsp;
                                        <select id="captureType" onchange="SetStartStopButtons();"></select>
                                    </form>
                                    <br />
                                    <input style="width: 100%; padding: 10px; margin-left: -19px;" type="button" id="btStart" onclick="Start();" value="التقاط/اعادة الالتقاط" disabled />
                                    <input style="display:none" type="button" id="btStop" onclick="Stop();" value="Stop" disabled />
                                    <input style="display: none; width: 100%; padding: 10px; margin-left: -16px;" type="button" id="btTakeImage" onclick="TakeResultImageManually();" value="Take Image" disabled />
                                </div>
                            </div>
                        </div>


                        <div class="templatemo-content-widget white-bg col-1" style="float: left;display:none">
                            <i class="fa fa-times"></i>
                            <h2 class="text-uppercase">Messaging Center</h2>
                            <h3 class="text-uppercase">API Feedback and Logging</h3><hr>
                            &nbsp;&nbsp;<input type="checkbox" id="idAppendFunctionResult" checked />&nbsp;&nbsp;Append Function Result --------------------------
                            <div class="titleHeader">
                                Result Value
                            </div>
                            <textarea id="idFunctionResult" style="width:98%; height:150px; margin:3px"></textarea>
                            <div class="titleHeader">
                                Additional Information
                            </div>
                            <textarea id="idAdditionalInformation" style="width:98%; height:100px; margin:3px"></textarea>
                        </div>
                    </div>

                    <footer style="position: relative; float: left; width:100%">
                        <p>
                            | Copyright &copy; 2021 Integrated Biometrics |
                        </p>
                    </footer>
                </div>
            </div>
        </div>


    </div>

</body>

